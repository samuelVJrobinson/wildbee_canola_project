functions { 
  /* compute a latent Gaussian process - function generated by brms  
   *	This *should* be faster than inverting a 300x300 matrix each iteration
   *   x: array of continuous predictor values
   *   sdgp: marginal SD parameter
   *   lscale: length-scale parameter
   *   zgp: vector of independent standard normal variables 
   *   sigma: variance if distance = 0
   * Returns:  
   *   a vector to be added to the linear predictor
   */ 
	vector gp(vector x, real sdgp, real lscale, real sigma, vector zgp) {
		int N = rows(x);
		matrix[N, N] cov; //Declare covariance matrix
		real x_act[N];
		for(i in 1:N){ //This is a weird work-around that allows x to be defined as a row vector.
			x_act[i]=x[i];
		}		
		cov = cov_exp_quad(x_act, sdgp, lscale) + diag_matrix(rep_vector(sigma + 1e-9, rows(x))); // deal with numerical non-positive-definiteness    	
		return cholesky_decompose(cov) * zgp; //Decomposed covariance matrix * unit normals
	}

	/* Function to calculate inverse (y=x) of Gaussian curve, given:
	yval: y-value to find x values at
	mu: mean
	sigma: standard deviation
	amp: amplitude (height of curve)
	*/
	vector invGaus(real yval, real mu, real sigma, real amp){
		vector[2] xval; //Declare x-values		
		xval[1]=mu+(sqrt(2)*sigma*sqrt(log(amp/yval)));
		xval[2]=mu-(sqrt(2)*sigma*sqrt(log(amp/yval)));
		return xval;
	}
} 

data {
	int N; //Number of data points for both years
	int NperYear[2]; //Number of data points per year
	int Nsite; //Number of sites used in each year
	int Ncanola; //Number of observed canola measurements
	int<lower=1,upper=Nsite> site[N]; //Site index	
	int year[N]; //Year
	int NperSite[Nsite,2]; //Number of data points per site per year	
	int<lower=0> count[N]; //Number of bees	
	vector[N] traplength; //Traplength offset (in weeks)	
	vector[N] centDate; //Centered date (in weeks, centered per-year)	
	vector[N] centEndDate; //Centered end date 
	vector[Ncanola] centBloomDate; //Centered end date (in weeks, centered per-year using mean of middate) - used for canola bloom model
	vector[Ncanola] canolaBloom; //Canola bloom	measurements	
	int bloomIndex[Ncanola]; //Index for bloom measurements
	int<lower=0,upper=1> nearCanola[Ncanola]; //Was trap near canola?
	vector[Nsite] percSNL; //Amount of SNL within 500m of each site
	real percCanola[Nsite,2]; //Amount of canola within 250m of each site in each year
}

parameters {
	//Params for GP - 1 for each year
	real<lower=0> rho[2]; //(log) Length-scale: how fast does correlation decay with distance
	real<lower=0> alpha[2]; //Max (log) covariance b/w points aka marginal SD parameter
	// real<lower=0> sigma; //Variance between obs at same time	
	vector[N] eta; //Unit normals
	
	//Bee count parameters - 1 for each year
	matrix<lower=0,upper=1>[Nsite,2] occupied; //Is each site occupied during each year?
	real b0[2]; //"Global intercept" - mean for neg.bin. process			
	vector<lower=0>[Nsite] b0err; //"Error" for site intercept (random effect of site)
	real<lower=0> b0sd; //SD for generating site error
	real SNLslope[2]; //SNL effect on site intercept
	real slopeLastYear; //Effect of last year on site intercept	
	//real intLastYear; //Interaction between SNL and last year's intercept
	real slopeCanolaOverlap; //Effect of last year's canola overlap on this year's abundance	
	real canolaEffect[2]; //Effect of canola abundance on per-pass bee count
	real<lower=0> phi[2]; //Dispersion parameter for neg. bin.
	
	//Canola bloom parameters - 1 for each year
	real muCanola[2]; //Peak bloom time
	real<lower=0> sigmaCanola[2]; //SD of bloom time
	real<lower=0> residCanola; //"Residual" for canola bloom - diff b/w predicted and actual	
	real<lower=0,upper=120> ampCanola[2]; //Amplitude of canola bloom (supposed to be 100, but may differ b/w years)
}

transformed parameters {
	//Params for canola bloom overlap
	vector<lower=0, upper=1>[N] predCanolaPass; //Predicted canola overlap for each pass
	vector<lower=0>[Nsite] siteCanolaOverlap = rep_vector(0, Nsite); //Summed overlap of canola bloom for each site for year 1
	matrix[2,2] siteCanolaLims; //stop and start of canola bloom (columns) for year 1 and 2 (rows)
	//Setup	
	vector[Ncanola] predCanola = rep_vector(0, Ncanola); //Predicted canola bloom for observed values				
	matrix[Nsite,2] mu_site; // Site intercept - influenced by other things (see below)	
	vector[N] mu; //Expected value for neg. bin. process
	vector[N] gpTrend; //Effect of gaussian process (temporal trend)
	
	/* 	Calculate "overlap" metric for each pass (for how much of each pass was canola bloom "on" or "off") and
		multiply by proportion of canola surrounding each site - spatiotemporal availability
		Sum overlap for each site	*/
	
	//Start and stop dates of canola (over 10%). Assumes amplitude of 100%
	siteCanolaLims[1,]=invGaus(10,muCanola[1],sigmaCanola[1],100)'; //Year 1
	siteCanolaLims[2,]=invGaus(10,muCanola[2],sigmaCanola[2],100)'; // Year 2
	
	for(i in 1:N){			  					
		//Calculate canola overlap for pass = %canola2015 x overlap		
		predCanolaPass[i]= max([min([siteCanolaLims[year[i],1],centEndDate[i]])-max([siteCanolaLims[year[i],2],centEndDate[i]-traplength[i]]),0])/
			traplength[i]*percCanola[site[i],1]; 				
		//Add overlap to siteCanolaOverlap if year == 2015
		if(year[i]==1){
			siteCanolaOverlap[site[i]]=siteCanolaOverlap[site[i]]+predCanolaPass[i];
		}		
	}
	
	/* Model for per-site bee counts (intercepts)
		intercept2015 = SNLslope2015*SNL : SNL controls "long-term" abundance 
		intercept2016 = SNLslope2016*SNL + slope2015*count2015 : year-to-year transition rate + last year's abundance
	*/

	//Site-level intercept 2015	
	mu_site[,1]= SNLslope[1]*percSNL + //Effect of SNL ("Long-term" effect)			 
				(b0err-(1/b0sd));  //Random effect of site (centralized gamma)
	// Site intercept 2016 = Effect of SNL + Effect of 2015 + Interaction
	mu_site[,2]= slopeLastYear*mu_site[,1] + //Effect of last year's intercept (population)
				SNLslope[2]*percSNL + //Effect of SNL ("year-to-year" effect)
				slopeCanolaOverlap*siteCanolaOverlap; //Effect of canola overlap from last year
				//b0err[,2]; //Random effect of site - not enough info to estimate					
	
	//Gives a "deep copy" warning if using vector directly
		
	/*Model for per-pass bee counts:
	counts ~ negbin(mu,phi)
	mu= global intercept + site intercept + gaussian process + SNL effect + canola effect + overlap effect
	*/				
	
	//Trend for gaussian process model for year 1 - takes 40 mins for 100 iterations
	gpTrend[1:NperYear[1]] = gp(centDate[1:NperYear[1]], alpha[1], rho[1], 0, eta[1:NperYear[1]]);			
	//Trend for gaussian process for year 2
	gpTrend[NperYear[1]+1:N] = gp(centDate[NperYear[1]+1:N], alpha[2], rho[2], 0, 
		eta[NperYear[1]+1:N]);
	
	{
		int startPos = 1; //First position in vector, must be declared locally		
		int endPos = 0; //Last position in vector
		for(i in 1:Nsite){ //Model for counts in year 1
			endPos = (NperSite[i,1]+startPos-1); //End position in vector			
			// //Trend for gaussian process model for year 1 
			// gpTrend[startPos:endPos] = gp(centDate[startPos:endPos], alpha[1], rho[1], 0, 
				// eta[startPos:endPos]);						
			//Expected value for trap counts
			mu[startPos:endPos] = b0[1] + //Intercept for year
				mu_site[i,1] + //Site-level effects
				traplength[startPos:endPos] + //Offset for trapping length
				gpTrend[startPos:endPos] + //Gaussian process model			
				canolaEffect[1]*predCanolaPass[startPos:endPos]; //Effect of canola on count
			startPos=startPos+NperSite[i,1]; //Increment position
		}
		for(i in 1:Nsite){ //Model for counts in year 2	
			endPos = NperSite[i,2]+startPos-1; //End position			
			
			// //Trend for gaussian process for year 2
			// gpTrend[startPos:endPos] = gp(centDate[startPos:endPos], alpha[2], rho[2], 0, 
				// eta[startPos:endPos]);
			
			//Expected value for trap counts
			mu[startPos:endPos] =  b0[2] + //Global intercept for year
				mu_site[i,2] + //Global intercept + site intercept
				traplength[startPos:endPos] + //Offset for trapping length
				gpTrend[startPos:endPos] + //Gaussian process model			
				canolaEffect[2]*predCanolaPass[startPos:endPos]; //Effect of canola on count
			startPos=startPos+NperSite[i,2]; //Increment position
		}
	}
	 
	/* Model for canola bloom	 
		Clunky, but no vectorized form of pow(), so this is as good as it gets
	*/
	for(i in 1:Ncanola){ 
		if(nearCanola[i]==1){			 
			predCanola[i]=ampCanola[year[bloomIndex[i]]]*
				exp(-0.5*pow((centBloomDate[i]-muCanola[year[bloomIndex[i]]])/sigmaCanola[year[bloomIndex[i]]],2));			
		} 
	}	
}

model {  			
	vector[N] phiVector = rep_vector(phi[1],N); //Assign phi[1] and phi[2] to a vector
	for(i in 1:N){
		if(year[i]==2){
			phiVector[i]=phi[2];
		}
	}	
	
	//Priors	
	//Gaussian process - 1 for each year
	rho ~ gamma(3,3); //Prior for length-scale	
	alpha ~  gamma(3,3); //Prior for covariance				
	sigma ~ gamma(3,10); // Variance between points at same site at same time	
  	eta ~ normal(0,1); //Unit normals	
	
	//Bee counts for each site - 1 for each year
	b0 ~ normal(0,5); //Hyperprior for the site mean ("global intercept")	
	// b0sd ~ inv_gamma(2,0.75); //Hyperprior for site SD		
	// b0err ~ normal(0,b0sd);	
	b0sd ~ gamma(1.5,1); //Hyperprior for gamma term - non-normal random effect
	b0err ~ gamma(1,b0sd);	
	
	SNLslope ~ normal(0,3); //Prior for effect of SNL		
	slopeLastYear ~ normal(0,3); //Effect of last year's intercept
	// intLastYear ~ normal(0,3); //Interaction b/w SNL and last year's intercept
	canolaEffect ~ normal(0,3);	
	phi ~ gamma(1.5,1); //Prior for NB dispersion parameter 		
	
	//Canola bloom - informative priors
	muCanola ~ normal(-1,1); //Mean bloom date	
	sigmaCanola ~ gamma(2,2); //Width of bloom	
	ampCanola ~ normal(100,20); //Amplitude of bloom
	residCanola ~ gamma(1,1); //"Residual"
		
	//Likelihood		
	canolaBloom ~ normal(predCanola,residCanola);		
	count ~ neg_binomial_2_log(mu,phiVector);	//Count data along with trapping offset	
}

generated quantities {	
	// int predCount[N]; //Simulated counts
	// real count_resid[N]; //Residual
	// real predCount_resid[N]; //Residual for generated
		
	// for(i in 1:N){
		// count_resid[i] = exp(mu[i]) - count[i]; //Residual for actual value
		// predCount[i] = neg_binomial_2_log_rng(mu[i],phi[year[i]]); //Simulate bee counts
		// predCount_resid[i] = exp(mu[i]) - predCount[i]; //Residual for simulated bee counts
	// }
		
}
