model { #First version of canola model, where zero-canola sites have NA for canolaBloom
  
  #Priors
  
  #Mean of canola bloom
  mu.canola ~ dnorm(-12,0.01) #Prior for mean 
  sigma.mu.site ~ dgamma(1,0.5) #SD for mean random effect
  tau.mu.site<-pow(sigma.mu.site,-2) #Precision
  
  #"Residual"
  resid.canola ~ dgamma(0.1,0.1) 
  
  #Spread of canola bloom  
  sigma.canola ~ dgamma(3,0.1) #Shape factor
  sigma.sigma.site ~ dgamma(3,1) #Rate 
  # sigma.sigma.site <- 0.1 #Rate 
       
  for (i in 1:Nsite){ #For each site
    mu.site.canola[i] ~ dnorm(mu.canola,tau.mu.site) #Mean bloom
	sigma.site.canola[i] ~ dgamma(sigma.canola,sigma.sigma.site)  #SD of bloom		
	
	#Canola bloom "starts" at threshold of BloomThresh
	#Inverse function of gaussian is:
	#x = mu +/- sqrt(2)*sqrt(-log(y))*sigma		
	
	#Create "bloom start" and "bloom end" for each site
	bloomStart[i] <- mu.site.canola[i] - sqrt(2)*sqrt(-log(BloomThresh))*sigma.site.canola[i]
	bloomEnd[i] <- mu.site.canola[i] + sqrt(2)*sqrt(-log(BloomThresh))*sigma.site.canola[i]	
  }
    
  # Likelihood  
  for(i in 1:N){ #For each sample/pass...
	
  	#Canola bloom - gaussian shape parameter		
	site.mean[i]<-mu.site.canola[site[i]] #Take mean from each site
	site.sigma[i]<-sigma.site.canola[site[i]] #Take sigma from each site
	
	#Predicted canola bloom (gaussian): y = 100*exp(-0.5*((x-mu)/sigma)^2)
	pred.canola[i]<-100*exp(-0.5*((centEndDate[i]-site.mean[i])/site.sigma[i])^2)
	canolaBloom[i]~dnorm(pred.canola[i],resid.canola) #Residuals should be normally distributed
	
	#Proportion of pass that overlapped with canola bloom
	propOverlap[i] <- max((min(centEndDate[i],bloomEnd[site[i]])-max(centStartDate[i],bloomStart[site[i]]))/(centEndDate[i]-centStartDate[i]),0)
	
	
	
	#Posterior predictive checks
	#Absolute residual
    res[i] <- ifelse(nearCanola[site[i]]>0,abs(canolaBloom[i] - pred.canola[i]),0)
    #Generate new dataset
    canolaBloom.new[i] ~ dnorm(pred.canola[i],resid.canola)
	#Deals with residuals near boundary conditions (0 & 100% bloom)
    res.new[i] <- ifelse(nearCanola[site[i]]>0,
		abs(ifelse(canolaBloom.new[i]>100,100,ifelse(canolaBloom.new[i]<0,0,canolaBloom.new[i])) - pred.canola[i]),
		0)		
  }  
  
#Derived parameters for posterior predictive check
  fit <- sum(res[])
  fit.new <- sum(res.new[])  
    
}