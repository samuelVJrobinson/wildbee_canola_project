#Model of count of A. terminalis using negative binomial GLMM framework 
#NOTE: alternative modelling of NB using 
#https://blog.aidanfindlater.com/2016/09/12/poisson-and-negbin-in-jags/

model {
  
  # #Hyperpriors
  # alpha.mean ~ dunif(-100,100)
  # alpha.sd ~ dunif(0,100)
  # alpha.prec <- 1 / (alpha.sd*alpha.sd)
  
  #Priors
  alpha ~ dnorm(0,0.001) #Prior for intercept
  beta ~ dnorm(0,0.001) #Prior for slope
  r ~ dunif(0,50) #Prior for r (number of failures)
    
  #Generate random effect
  
  # for (i in 1:npop){
    # alpha[i] ~ dnorm(alpha.mean,alpha.prec)
  # }
  
  # Likelihood  
  for(i in 1:N){ #For each sample...
  	
	#Model lambda[i] as linear function of centDate, using traplength as an offset	
	log(lambda[i])<-log(traplength[i])+alpha+beta*centDate[i]
	
	#Transform lambda[i] into p[i] using r
	p[i]<-r/(r+lambda[i])
		
	#Model actual count
	count[i]~dnegbin(p[i],r)
	
	#Mean value
	meanVal[i]<-(p[i]*r)/(1-p[i])
	#Absolute residual
    res[i] <- abs(count[i] - meanVal[i])
    #Generate new dataset
    count.new[i] ~ dnegbin(p[i],r) 
    res.new[i] <- abs(count.new[i] - meanVal[i])
  }
  
  #Derived parameters for posterior predictive check
  fit <- sum(res[])
  fit.new <- sum(res.new[])
  
}