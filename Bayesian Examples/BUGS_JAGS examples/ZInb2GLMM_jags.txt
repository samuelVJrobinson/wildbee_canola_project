#Model of count of A. terminalis using negative binomial GLMM framework 
model {
  
  # #Hyperpriors
  alpha.mean ~ dnorm(0,.1)
  alpha.sd ~ dunif(0,10)
  alpha.prec <- 1 / (alpha.sd*alpha.sd)
  
  #Priors
  # alpha ~ dnorm(0,0.001) #Prior for intercept
  beta ~ dnorm(0,0.01) #Prior for slope
  r ~ dunif(0,50) #Prior for r (number of failures)
  theta.zero ~ dunif(0,1) #Prior for zero-inflation term  
    
  for (i in 1:Nsite){ #For each site
    alpha[i] ~ dnorm(alpha.mean,alpha.prec) #Random intercept for count~centDate
	siteZero[i] ~ dbern(theta.zero) #Occupancy term for each site			
  }
  
  # Likelihood  
  for(i in 1:N){ #For each sample...
  	
	#Model lambda[i] as linear function of centDate, using traplength as an offset	
	# log(lambda[i])<-log(traplength[i])+alpha[site[i]]+beta*centDate[i]
	log(lambda[i])<-ifelse(siteZero[site[i]]>0,log(traplength[i])+alpha[site[i]]+beta*centDate[i]+0.00001,0.00001)
	
	#Transform lambda[i] into p[i] using r
	p[i]<-r/(r+lambda[i])
		
	#Model actual count
	count[i]~dnegbin(p[i],r)
	
	#Mean value
	meanVal[i]<-(p[i]*r)/(1-p[i])
	#Absolute residual
    res[i] <- abs(count[i] - meanVal[i])
    #Generate new dataset
    count.new[i] ~ dnegbin(p[i],r) #This command has never succesfully completed...
    res.new[i] <- abs(count.new[i] - meanVal[i])
  }
  
  #Derived parameters for posterior predictive check
  fit <- sum(res[])
  fit.new <- sum(res.new[])
  
}